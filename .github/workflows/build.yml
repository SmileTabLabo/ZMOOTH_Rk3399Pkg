name: Build rk3399-edk2

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REPO_URL: https://github.com/shantur/rk3399-edk2
  REPO_BRANCH: master
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 1. ソースコードのチェックアウト
      uses: actions/checkout@v4

    - name: 2. CondaとPython 2.7の手動インストール
      run: |
        wget https://repo.anaconda.com/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        echo "$HOME/miniconda/bin" >> $GITHUB_PATH

    - name: 3. ビルド環境の初期化
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update
        sudo -E apt-get install -y build-essential acpica-tools nasm uuid-dev gcc-aarch64-linux-gnu
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workspace
        sudo chown $USER:$GROUPS /workspace

    - name: 4. 依存ソースコードのクローンと準備
      working-directory: /workspace
      run: |
        cp -r $GITHUB_WORKSPACE/prebuilts .
        chmod +x -R ./prebuilts/gcc-linaro-7.1.1-2017.05-x86_64_aarch64-linux-gnu/bin/*
        chmod +x -R ./prebuilts/gcc-linaro-7.1.1-2017.05-x86_64_aarch64-linux-gnu/libexec/gcc/aarch64-linux-gnu/7.1.1/*
        git clone https://github.com/tianocore/edk2.git
        pushd edk2
        git checkout 46f4c9677c615d862649459392f8f55b3e6567c2
        popd
        git clone https://github.com/tianocore/edk2-non-osi.git
        pushd edk2-non-osi
        git checkout 1e2ca640be54d7a4d5d804c4f33894d099432de3
        popd
        git clone https://github.com/tianocore/edk2-platforms.git
        pushd edk2-platforms
        git checkout 861c200cda1417539d46fe3b1eba2b582fa72cbb
        popd
        git clone https://github.com/shantur/rk3399-edk2.git edk2-platforms/Platform/Rockchip

    - name: 5. EDK2のコンパイル
      id: compile
      working-directory: /workspace
      run: |
        export GCC_BIN_DIR="/workspace/prebuilts/gcc-linaro-7.1.1-2017.05-x86_64_aarch64-linux-gnu/bin"
        export PATH="$GCC_BIN_DIR:$PATH"
        export GCC5_AARCH64_PREFIX=/workspace/prebuilts/gcc-linaro-7.1.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
        export WORKSPACE=/workspace
        export PACKAGES_PATH=$WORKSPACE/edk2:$WORKSPACE/edk2-platforms:$WORKSPACE/edk2-non-osi
        export PYTHON_COMMAND=$(which python)

        sed -i 's/-Werror//g' edk2/BaseTools/Source/C/Makefiles/header.makefile
        source edk2/edksetup.sh
        make -C edk2/BaseTools
        build -a AARCH64 -t GCC5 -p edk2-platforms/Platform/Rockchip/Rk3399Pkg/Rk3399-SDK.dsc -b DEBUG
        edk2-platforms/Platform/Rockchip/Rk3399Pkg/Tools/loaderimage --pack --uboot Build/Rk3399-SDK/DEBUG_GCC5/FV/RK3399_SDK_UEFI.fd RK3399_SDK_UEFI.img
        mkdir uefi_output

    # ...以降のステップは変更なし...
    - name: 6. イメージファイルの作成
      run: |
        sudo bash -c '
        IMAGE_FILE="/workspace/uefi_output/rk3399_image.img"
        IMAGE_SIZE=$((262144 * 512))
        IDBLOADER_BIN="/workspace/edk2-platforms/Platform/Rockchip/Rk3399Pkg/Tools/Bin/idbloader.bin"
        UEFI_IMG="/workspace/RK3399_SDK_UEFI.img"
        TRUST_IMG="/workspace/edk2-platforms/Platform/Rockchip/Rk3399Pkg/Tools/Bin/trust.img"
        dd if=/dev/zero of=${IMAGE_FILE} bs=1 count=0 seek=${IMAGE_SIZE}
        LOOP_DEVICE=$(losetup --show -fP ${IMAGE_FILE})
        parted ${LOOP_DEVICE} mklabel gpt
        parted ${LOOP_DEVICE} mkpart loader1 64s 8063s
        parted ${LOOP_DEVICE} mkpart reserved1 8064s 8191s
        parted ${LOOP_DEVICE} mkpart reserved2 8192s 16383s
        parted ${LOOP_DEVICE} mkpart loader2 16384s 24575s
        parted ${LOOP_DEVICE} mkpart atf 24576s 32767s
        parted ${LOOP_DEVICE} mkpart esp fat32 32768s 262143s
        parted ${LOOP_DEVICE} set 6 esp on
        dd if=${IDBLOADER_BIN} of=${LOOP_DEVICE}p1 bs=512 seek=64
        dd if=${UEFI_IMG} of=${LOOP_DEVICE}p4 bs=512 seek=0
        dd if=${TRUST_IMG} of=${LOOP_DEVICE}p5 bs=512 seek=0
        losetup -d ${LOOP_DEVICE}
        echo "イメージファイル ${IMAGE_FILE} が作成されました。"
        '

    - name: 7. デバッグ用のSSH接続 (必要な場合)
      uses: csexton/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: 8. ビルド成果物のコピー
      working-directory: /workspace
      run: |
        cp RK3399_SDK_UEFI.img uefi_output/
        cp Build/Rk3399-SDK/DEBUG_GCC5/FV/RK3399_SDK_UEFI.fd uefi_output/
        cp edk2-platforms/Platform/Rockchip/Rk3399Pkg/Tools/Bin/idbloader.img uefi_output/
        cp edk2-platforms/Platform/Rockchip/Rk3399Pkg/Tools/Bin/trust.img uefi_output/

    - name: 9. ディスク使用量の確認
      if: (!cancelled())
      run: df -hT

    - name: 10. binディレクトリのアップロード (必要な場合)
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: efi_target
        path: /workspace/uefi_output

    - name: 11. アップロード用ファイルの整理
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "FIRMWARE_PATH=/workspace/uefi_output" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 12. ファームウェアのアップロード
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: uefi_firmware_${{ github.run_id }}
        path: ${{ env.FIRMWARE_PATH }}
